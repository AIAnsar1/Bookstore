<?php

namespace Tests\Feature\Api;

use Tests\TestCase;
use App\Models\Product;
use App\Models\User;
use App\Models\Category;
use App\Models\Brand;
use App\Models\Author;
use Illuminate\Foundation\Testing\RefreshDatabase;
// use Laravel\Passport\Passport;

class ProductControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
    }

    public function test_can_get_products_list()
    {
        $user = $this->authenticateUser();

        Product::factory()->count(5)->create();

        $response = $this->getJson('/api/admin/products');

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        '*' => [
                            'id',
                            'title',
                            'description',
                            'price',
                            'selling_method'
                        ]
                    ]
                ]);
    }

    public function test_can_create_product()
    {
        $user = User::factory()->create();
        $category = Category::factory()->create();
        $brand = Brand::factory()->create();
        $author = Author::factory()->create();
        
        $this->actingAs($user);

        $productData = [
            'title' => [
                'en' => 'Test Book',
                'ru' => 'Тестовая книга',
                'uz' => 'Test kitob'
            ],
            'description' => [
                'en' => 'Test description',
                'ru' => 'Тестовое описание',
                'uz' => 'Test tavsif'
            ],
            'photo' => [
                'en' => 'test.jpg',
                'ru' => 'test.jpg',
                'uz' => 'test.jpg'
            ],
            'pdf' => 'test.pdf',
            'selling_method' => 'digital',
            'price' => 29.99,
            'category_id' => $category->id,
            'brand_id' => $brand->id,
            'author_id' => $author->id,
            'user_id' => $user->id
        ];

        $response = $this->postJson('/api/admin/products', $productData);

        $response->assertStatus(201);
        
        $this->assertDatabaseHas('products', [
            'price' => 29.99,
            'selling_method' => 'digital',
            'category_id' => $category->id
        ]);
    }

    public function test_can_show_single_product()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();
        
        $this->actingAs($user);

        $response = $this->getJson("/api/admin/products/{$product->id}");

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        'id',
                        'title',
                        'description',
                        'price',
                        'selling_method'
                    ]
                ]);
    }

    public function test_can_update_product()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();
        
        $this->actingAs($user);

        $updateData = [
            'title' => [
                'en' => 'Updated Title',
                'ru' => 'Обновленное название',
                'uz' => 'Yangilangan sarlavha'
            ],
            'price' => 39.99,
            'selling_method' => 'physical'
        ];

        $response = $this->putJson("/api/admin/products/{$product->id}", $updateData);

        $response->assertStatus(200);
        
        $this->assertDatabaseHas('products', [
            'id' => $product->id,
            'price' => 39.99,
            'selling_method' => 'physical'
        ]);
    }

    public function test_can_delete_product()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();
        
        $this->actingAs($user);

        $response = $this->deleteJson("/api/admin/products/{$product->id}");

        $response->assertStatus(200);
        
        $this->assertSoftDeleted('products', [
            'id' => $product->id
        ]);
    }

    public function test_product_creation_requires_authentication()
    {
        $productData = [
            'title' => ['en' => 'Test Book'],
            'price' => 29.99
        ];

        $response = $this->postJson('/api/admin/products', $productData);

        $response->assertStatus(401);
    }

    public function test_product_creation_validates_required_fields()
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $response = $this->postJson('/api/admin/products', []);

        $response->assertStatus(422)
                ->assertJsonValidationErrors(['title', 'price']);
    }

    public function test_can_filter_products_by_category()
    {
        $user = User::factory()->create();
        $category1 = Category::factory()->create();
        $category2 = Category::factory()->create();
        
        Product::factory()->create(['category_id' => $category1->id]);
        Product::factory()->create(['category_id' => $category2->id]);
        
        $this->actingAs($user);

        $response = $this->getJson("/api/admin/products?category_id={$category1->id}");

        $response->assertStatus(200);
        $products = $response->json('data');
        
        $this->assertCount(1, $products);
        $this->assertEquals($category1->id, $products[0]['category_id']);
    }

    public function test_can_filter_products_by_brand()
    {
        $user = User::factory()->create();
        $brand1 = Brand::factory()->create();
        $brand2 = Brand::factory()->create();
        
        Product::factory()->create(['brand_id' => $brand1->id]);
        Product::factory()->create(['brand_id' => $brand2->id]);
        
        $this->actingAs($user);

        $response = $this->getJson("/api/admin/products?brand_id={$brand1->id}");

        $response->assertStatus(200);
        $products = $response->json('data');
        
        $this->assertCount(1, $products);
        $this->assertEquals($brand1->id, $products[0]['brand_id']);
    }

    public function test_can_filter_products_by_author()
    {
        $user = User::factory()->create();
        $author1 = Author::factory()->create();
        $author2 = Author::factory()->create();
        
        Product::factory()->create(['author_id' => $author1->id]);
        Product::factory()->create(['author_id' => $author2->id]);
        
        $this->actingAs($user);

        $response = $this->getJson("/api/admin/products?author_id={$author1->id}");

        $response->assertStatus(200);
        $products = $response->json('data');
        
        $this->assertCount(1, $products);
        $this->assertEquals($author1->id, $products[0]['author_id']);
    }
}
