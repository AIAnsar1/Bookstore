<?php

namespace Tests\Feature\Api;

use Tests\TestCase;
use App\Models\Author;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Passport\Passport;

class AuthorControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('passport:install', ['--force' => true]);
    }

    public function test_can_get_authors_list()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        Author::factory()->count(3)->create();

        $response = $this->getJson('/api/admin/authors');

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        '*' => [
                            'id',
                            'name',
                            'photo',
                            'description'
                        ]
                    ]
                ]);
    }

    public function test_can_create_author()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        $authorData = [
            'name' => [
                'en' => 'Stephen King',
                'ru' => 'Стивен Кинг',
                'uz' => 'Stiven King'
            ],
            'photo' => [
                'en' => 'stephen-king.jpg',
                'ru' => 'stephen-king.jpg',
                'uz' => 'stephen-king.jpg'
            ],
            'description' => [
                'en' => 'Famous horror writer',
                'ru' => 'Знаменитый писатель ужасов',
                'uz' => 'Mashhur qorqinchli yozuvchi'
            ]
        ];

        $response = $this->postJson('/api/admin/authors', $authorData);

        $response->assertStatus(201);
        
        $this->assertDatabaseHas('authors', [
            'name->en' => 'Stephen King'
        ]);
    }

    public function test_can_show_single_author()
    {
        $user = User::factory()->create();
        $author = Author::factory()->create();
        
        Passport::actingAs($user);

        $response = $this->getJson("/api/admin/authors/{$author->id}");

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        'id',
                        'name',
                        'photo',
                        'description'
                    ]
                ]);
    }

    public function test_can_update_author()
    {
        $user = User::factory()->create();
        $author = Author::factory()->create();
        
        Passport::actingAs($user);

        $updateData = [
            'name' => [
                'en' => 'Updated Author Name',
                'ru' => 'Обновленное имя автора',
                'uz' => 'Yangilangan muallif nomi'
            ]
        ];

        $response = $this->putJson("/api/admin/authors/{$author->id}", $updateData);

        $response->assertStatus(200);
        
        $this->assertDatabaseHas('authors', [
            'id' => $author->id,
            'name->en' => 'Updated Author Name'
        ]);
    }

    public function test_can_delete_author()
    {
        $user = User::factory()->create();
        $author = Author::factory()->create();
        
        Passport::actingAs($user);

        $response = $this->deleteJson("/api/admin/authors/{$author->id}");

        $response->assertStatus(200);
        
        $this->assertSoftDeleted('authors', [
            'id' => $author->id
        ]);
    }

    public function test_author_operations_require_authentication()
    {
        $response = $this->getJson('/api/admin/authors');
        $response->assertStatus(401);

        $response = $this->postJson('/api/admin/authors', []);
        $response->assertStatus(401);
    }

    public function test_author_creation_validates_required_fields()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        $response = $this->postJson('/api/admin/authors', []);

        $response->assertStatus(422)
                ->assertJsonValidationErrors(['name']);
    }
}
