<?php

namespace Tests\Feature\Api;

use Tests\TestCase;
use App\Models\Role;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Passport\Passport;

class RoleControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('passport:install', ['--force' => true]);
    }

    public function test_can_get_roles_list()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        Role::factory()->count(3)->create();

        $response = $this->getJson('/api/admin/role');

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        '*' => [
                            'id',
                            'name',
                            'role_code',
                            'status'
                        ]
                    ]
                ]);
    }

    public function test_can_create_role()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        $roleData = [
            'name' => 'Manager',
            'role_code' => 'manager',
            'status' => \App\Constants\GeneralStatus::STATUS_ACTIVE,
            'guard_name' => 'web'
        ];

        $response = $this->postJson('/api/admin/role', $roleData);

        $response->assertStatus(201);
        
        $this->assertDatabaseHas('roles', [
            'name' => 'Manager',
            'role_code' => 'manager'
        ]);
    }

    public function test_can_show_single_role()
    {
        $user = User::factory()->create();
        $role = Role::factory()->create();
        
        Passport::actingAs($user);

        $response = $this->getJson("/api/admin/role/{$role->id}");

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        'id',
                        'name',
                        'role_code',
                        'status'
                    ]
                ]);
    }

    public function test_can_update_role()
    {
        $user = User::factory()->create();
        $role = Role::factory()->create();
        
        Passport::actingAs($user);

        $updateData = [
            'name' => 'Updated Role',
            'status' => \App\Constants\GeneralStatus::STATUS_NOT_ACTIVE
        ];

        $response = $this->putJson("/api/admin/role/{$role->id}", $updateData);

        $response->assertStatus(200);
        
        $this->assertDatabaseHas('roles', [
            'id' => $role->id,
            'name' => 'Updated Role'
        ]);
    }

    public function test_can_delete_role()
    {
        $user = User::factory()->create();
        $role = Role::factory()->create();
        
        Passport::actingAs($user);

        $response = $this->deleteJson("/api/admin/role/{$role->id}");

        $response->assertStatus(200);
        
        $this->assertSoftDeleted('roles', [
            'id' => $role->id
        ]);
    }

    public function test_role_operations_require_authentication()
    {
        $response = $this->getJson('/api/admin/role');
        $response->assertStatus(401);

        $response = $this->postJson('/api/admin/role', []);
        $response->assertStatus(401);
    }
}
