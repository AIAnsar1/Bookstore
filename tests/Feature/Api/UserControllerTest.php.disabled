<?php

namespace Tests\Feature\Api;

use Tests\TestCase;
use App\Models\User;
use App\Models\Role;
use App\Models\Country;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Passport\Passport;

class UserControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();
        $this->artisan('passport:install', ['--force' => true]);
    }

    public function test_can_get_users_list()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        User::factory()->count(3)->create();

        $response = $this->getJson('/api/admin/user');

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        '*' => [
                            'id',
                            'firstname',
                            'lastname',
                            'email',
                            'phone_number'
                        ]
                    ]
                ]);
    }

    public function test_can_create_user()
    {
        $user = User::factory()->create();
        $country = Country::factory()->create();
        
        Passport::actingAs($user);

        $userData = [
            'firstname' => 'John',
            'lastname' => 'Doe',
            'email' => 'john@example.com',
            'phone_number' => '+1234567890',
            'address' => '123 Main St',
            'photo' => 'john.jpg',
            'country_id' => $country->id,
            'password' => 'password123'
        ];

        $response = $this->postJson('/api/admin/user', $userData);

        $response->assertStatus(201);
        
        $this->assertDatabaseHas('users', [
            'firstname' => 'John',
            'lastname' => 'Doe',
            'email' => 'john@example.com'
        ]);
    }

    public function test_can_show_single_user()
    {
        $admin = User::factory()->create();
        $user = User::factory()->create();
        
        Passport::actingAs($admin);

        $response = $this->getJson("/api/admin/user/{$user->id}");

        $response->assertStatus(200)
                ->assertJsonStructure([
                    'data' => [
                        'id',
                        'firstname',
                        'lastname',
                        'email',
                        'phone_number'
                    ]
                ]);
    }

    public function test_can_update_user()
    {
        $admin = User::factory()->create();
        $user = User::factory()->create();
        
        Passport::actingAs($admin);

        $updateData = [
            'firstname' => 'Updated Name',
            'phone_number' => '+9876543210'
        ];

        $response = $this->putJson("/api/admin/user/{$user->id}", $updateData);

        $response->assertStatus(200);
        
        $this->assertDatabaseHas('users', [
            'id' => $user->id,
            'firstname' => 'Updated Name',
            'phone_number' => '+9876543210'
        ]);
    }

    public function test_can_delete_user()
    {
        $admin = User::factory()->create();
        $user = User::factory()->create();
        
        Passport::actingAs($admin);

        $response = $this->deleteJson("/api/admin/user/{$user->id}");

        $response->assertStatus(200);
        
        $this->assertSoftDeleted('users', [
            'id' => $user->id
        ]);
    }

    public function test_can_filter_users_by_status()
    {
        $admin = User::factory()->create();
        $activeUser = User::factory()->create();
        $inactiveUser = User::factory()->create();
        
        $activeRole = Role::factory()->create(['status' => \App\Constants\GeneralStatus::STATUS_ACTIVE]);
        $inactiveRole = Role::factory()->create(['status' => \App\Constants\GeneralStatus::STATUS_NOT_ACTIVE]);
        
        $activeUser->roles()->attach($activeRole);
        $inactiveUser->roles()->attach($inactiveRole);
        
        Passport::actingAs($admin);

        $response = $this->getJson('/api/admin/user?status=' . \App\Constants\GeneralStatus::STATUS_ACTIVE);

        $response->assertStatus(200);
        $users = $response->json('data');
        
        $this->assertGreaterThanOrEqual(1, count($users));
    }

    public function test_can_filter_users_by_role()
    {
        $admin = User::factory()->create();
        $adminUser = User::factory()->create();
        $customerUser = User::factory()->create();
        
        $adminRole = Role::factory()->create(['role_code' => 'admin']);
        $customerRole = Role::factory()->create(['role_code' => 'customer']);
        
        $adminUser->roles()->attach($adminRole);
        $customerUser->roles()->attach($customerRole);
        
        Passport::actingAs($admin);

        $response = $this->getJson('/api/admin/user?role=admin');

        $response->assertStatus(200);
        $users = $response->json('data');
        
        $this->assertGreaterThanOrEqual(1, count($users));
    }

    public function test_user_operations_require_authentication()
    {
        $response = $this->getJson('/api/admin/user');
        $response->assertStatus(401);

        $response = $this->postJson('/api/admin/user', []);
        $response->assertStatus(401);
    }

    public function test_user_creation_validates_required_fields()
    {
        $user = User::factory()->create();
        Passport::actingAs($user);

        $response = $this->postJson('/api/admin/user', []);

        $response->assertStatus(422)
                ->assertJsonValidationErrors(['firstname', 'lastname', 'email']);
    }

    public function test_user_creation_validates_unique_email()
    {
        $user = User::factory()->create();
        $existingUser = User::factory()->create(['email' => 'existing@example.com']);
        
        Passport::actingAs($user);

        $userData = [
            'firstname' => 'John',
            'lastname' => 'Doe',
            'email' => 'existing@example.com'
        ];

        $response = $this->postJson('/api/admin/user', $userData);

        $response->assertStatus(422)
                ->assertJsonValidationErrors(['email']);
    }
}
